{{!-- Además, crear una vista “realTimeProducts.handlebars”, la cual vivirá en el endpoint “/realtimeproducts”  en nuestro views router, 
(lo explica al final de la clase 12) ésta contendrá la misma lista de productos, sin embargo, ésta trabajará con websockets.
Al trabajar con websockets, cada vez que creemos un producto nuevo, o bien cada vez que eliminemos un producto, se debe actualizar
 automáticamente en dicha vista la lista.
 
 
 Ya que la conexión entre una consulta HTTP y websocket no está contemplada dentro de la clase. Se recomienda que, para la creación y
eliminación de un producto, Se cree un formulario simple en la vista  realTimeProducts.handlebars. Para que el contenido se envíe desde
websockets y no HTTP. Sin embargo, esta no es la mejor solución, leer el siguiente punto.
Si se desea hacer la conexión de socket emits con HTTP, deberás buscar la forma de utilizar el servidor io de Sockets dentro de la petición 
POST. ¿Cómo utilizarás un emit dentro del POST?

 --}}


 {{!-- Esta es mi motor de plantilla para todos los productos en tiempo real --}}

<h1>Productos en tiempo real</h1>
<h2>Agregar producto</h2>

 <div  class="agregarProducto">
    <button id="agregarProducto">Agregar un Juego</button>
</div>


<div id="productsContenedorDeTiempoReal">
 <div class="row">
            {{#each products}} <!-- Iteramos sobre el array de productos -->
            <div class="col-md-4"> <!-- Cada card ocupa 1/3 del ancho de la pantalla en pantallas medianas -->
                <div class="card mb-4 shadow-sm">
                    <!-- Imagen del producto, si está disponible -->
                    {{#if this.thumbnails}}
                    <img src="{{this.thumbnails}}" class="card-img-top" alt="Imagen de {{this.title}}">
                    {{else}}
                    <img src="https://via.placeholder.com/150" class="card-img-top" alt="Imagen no disponible"> <!-- Imagen de reemplazo si no hay thumbnail -->
                    {{/if}}
                    <div class="card-body">
                        <h5 class="card-title">{{this.title}}</h5> <!-- Título del producto -->
                        <p class="card-text">{{this.description}}</p> <!-- Descripción del producto -->
                        <p class="card-text">Precio: ${{this.price}}</p> <!-- Precio del producto -->
                        <p class="card-text">Stock: {{this.stock}}</p> <!-- Stock disponible -->
                        <p class="card-text">Categoría: {{this.category}}</p> <!-- Categoría del producto -->
                        <p class="card-text">Estado: {{#if this.status}}Disponible{{else}}No disponible{{/if}}</p> <!-- Estado del producto -->
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">Código: {{this.code}}</small> <!-- Código del producto -->
                            <button class="btn btn-danger btn-sm" onclick="eliminarProducto('{{this.id}}')">Eliminar</button> <!-- Botón de eliminar -->
                        </div>
                    </div>
                </div>
            </div>
            {{/each}} 
        </div>
</div>



<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script> {{!-- sweetalert2 --}}
<script src="/socket.io/socket.io.js"></script> {{!-- esto es del lado del cliente --}}
<script src="/js/real.js"></script>